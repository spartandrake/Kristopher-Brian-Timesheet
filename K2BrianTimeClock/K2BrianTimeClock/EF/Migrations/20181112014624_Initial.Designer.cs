// <auto-generated />
using System;
using K2BrianTimeClock.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace K2BrianTimeClock.DAL.EF.Migrations
{
    [DbContext(typeof(ClockContext))]
    [Migration("20181112014624_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TimeClock.Models.Entities.ClockIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId");

                    b.Property<decimal>("HoursWorked");

                    b.Property<int?>("TimeInId");

                    b.Property<int?>("TimeOutId");

                    b.Property<int?>("TimeSheetId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TimeInId");

                    b.HasIndex("TimeOutId");

                    b.HasIndex("TimeSheetId");

                    b.ToTable("ClockIns","TimeClock");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.DateAndTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<int>("Hour");

                    b.Property<int>("Minute");

                    b.Property<int>("Month");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("DateAndTimes","TimeClock");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CurrentWage")
                        .HasColumnType("money")
                        .HasMaxLength(4);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeLastName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsExempt");

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TimeSheetId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasName("IX_Employees");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TimeSheetId");

                    b.ToTable("Employees","TimeClock");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.TimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CurrentWage");

                    b.Property<int?>("EmployeeId");

                    b.Property<int>("HoursWorked");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalPay")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("[HoursWorked]*[CurrentWage]");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeSheets","TimeClock");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.Manager", b =>
                {
                    b.HasBaseType("TimeClock.Models.Entities.Employee");


                    b.ToTable("Managers","TimeClock");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.HRManager", b =>
                {
                    b.HasBaseType("TimeClock.Models.Entities.Manager");


                    b.ToTable("HRManagers","TimeClock");

                    b.HasDiscriminator().HasValue("HRManager");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.ClockIn", b =>
                {
                    b.HasOne("TimeClock.Models.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TimeClock.Models.Entities.DateAndTime", "TimeIn")
                        .WithMany()
                        .HasForeignKey("TimeInId");

                    b.HasOne("TimeClock.Models.Entities.DateAndTime", "TimeOut")
                        .WithMany()
                        .HasForeignKey("TimeOutId");

                    b.HasOne("TimeClock.Models.Entities.TimeSheet", "TimeSheet")
                        .WithMany("ClockIns")
                        .HasForeignKey("TimeSheetId");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.Employee", b =>
                {
                    b.HasOne("TimeClock.Models.Entities.Manager", "Supervisor")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId");

                    b.HasOne("TimeClock.Models.Entities.TimeSheet", "CurrentTimeSheet")
                        .WithMany()
                        .HasForeignKey("TimeSheetId");
                });

            modelBuilder.Entity("TimeClock.Models.Entities.TimeSheet", b =>
                {
                    b.HasOne("TimeClock.Models.Entities.Employee", "Employee")
                        .WithMany("PreviousTimeSheets")
                        .HasForeignKey("EmployeeId");
                });
#pragma warning restore 612, 618
        }
    }
}
